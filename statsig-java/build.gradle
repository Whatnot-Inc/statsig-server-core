plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'io.github.gradle-nexus.publish-plugin' version "1.3.0" apply false
}

if (project == rootProject) {
    apply plugin: 'io.github.gradle-nexus.publish-plugin'
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl = uri("https://ossrh-staging-api.central.sonatype.com/service/local/")
                snapshotRepositoryUrl = uri("https://central.sonatype.com/repository/maven-snapshots/")
                username = System.getenv("ORG_GRADLE_PROJECT_MAVEN_USERNAME")
                password = System.getenv("ORG_GRADLE_PROJECT_MAVEN_PASSWORD")
            }
        }
    }
}

group 'com.statsig'
version project.property("version")

spotless {
    java {
        target 'src/**/*.java'
        googleJavaFormat()
        removeUnusedImports()
        importOrder()
    }
}

java {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

tasks.withType(JavaCompile).configureEach {
    options.release = 8
}

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-core:2.16.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.16.1'
    implementation 'org.jetbrains:annotations:24.0.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testImplementation 'com.squareup.okhttp3:okhttp:4.9.3'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.3'
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed"
    }
}

if (!project.ext.has('artifactTasks')) {
    project.ext.artifactTasks = []
}

tasks.register('sourcesJar', Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

tasks.register('javadocJar', Jar) {
    dependsOn tasks.javadoc
    archiveClassifier.set('javadoc')
    from tasks.javadoc.destinationDir
}

javadoc {
    options {
        windowTitle = "Statsig Java SDK"
        docTitle = "Statsig Java SDK API"
    }
}

ext.createStatsigJar = { String nameParam, String classifierParam ->
    if (nameParam == "uber") {
        tasks.register("uberJar", Jar) {
            archiveBaseName.set(nameParam)
            archiveClassifier.set("uber")
            from(sourceSets.main.output) {
                include 'com/statsig/**'
                include 'statsigsdk.properties'
            }

            // Include native libraries for all supported platforms
            def platforms = [
                "linux-gnu-x86_64" : "libstatsig_ffi.so",
                "linux-gnu-arm64"  : "libstatsig_ffi.so",
                "macos-x86_64"     : "libstatsig_ffi.dylib",
                "macos-arm64"      : "libstatsig_ffi.dylib",
                "windows-x86_64"   : "statsig_ffi.dll"
            ]

            dependsOn configurations.runtimeClasspath
            from {
                configurations.runtimeClasspath.findAll { it.name.endsWith("jar") }.collect { zipTree(it) }
            }

            platforms.each { classifier, libName ->
                def nativeSourceDir = file("src/main/resources/native/${classifier}")
                def nativeLibFile = new File(nativeSourceDir, libName)
                if (nativeLibFile.exists()) {
                    println "Including ${nativeLibFile.absolutePath} as native/${classifier}/${libName}"
                } else {
                    println "⚠️ Missing native lib: ${nativeLibFile.absolutePath}"
                }

                from(nativeSourceDir) {
                    include libName
                    into("native/${classifier}/")
                }
            }

            project.ext.artifactTasks.add([taskName: "uberJar", classifier: "uber"])
        }
        return
    }

    String taskName = nameParam + "Jar"

    tasks.register(taskName, Jar) {
        archiveBaseName.set(nameParam)
        if (nameParam != "java-core") {
            from sourceSets.main.output
        }

        def nativeLib = null
        if (classifierParam) {
            switch (classifierParam) {
                case ~/.*macos.*/:
                    nativeLib = "libstatsig_ffi.dylib"
                    break
                case ~/.*windows.*/:
                    nativeLib = "statsig_ffi.dll"
                    break
                case ~/.*linux.*/:
                    nativeLib = "libstatsig_ffi.so"
                    break
                case ~/.*centos.*/:
                    nativeLib = "libstatsig_ffi.so"
                    break
                default:
                    nativeLib = null
            }
        }

        // Include native library if needed
        if (nativeLib) {
            def nativeSourceDir = file("src/main/resources/native/${classifierParam}")
            from(nativeSourceDir) {
                into("native/${classifierParam}/")
            }
            include nativeLib
        }

        if (nameParam == "java-core") {
            from(sourceSets.main.output) {
                include 'com/statsig/**'
                include 'statsigsdk.properties'
            }

            dependsOn configurations.runtimeClasspath
            from {
                configurations.runtimeClasspath.findAll { it.name.endsWith("jar") }.collect { zipTree(it) }
            }
        }

        if (classifierParam != null) {
            archiveClassifier.set(classifierParam)
        }

        project.ext.artifactTasks.add([taskName: taskName, classifier: classifierParam])
    }
}

createStatsigJar('aarch64-apple-darwin', 'macos-arm64')
// todo: add support for these platforms
// createStatsigJar('aarch64-pc-windows-msvc', 'windows-arm64')
createStatsigJar('centos7-x86_64', 'centos7-x86_64')
createStatsigJar('amazonlinux2-arm64', 'amazonlinux2-arm64')
createStatsigJar('amazonlinux2-x86_64', 'amazonlinux2-x86_64')
createStatsigJar('amazonlinux2023-arm64', 'amazonlinux2023-arm64')
createStatsigJar('amazonlinux2023-x86_64', 'amazonlinux2023-x86_64')
createStatsigJar('i686-pc-windows-msvc', 'windows-i686')
createStatsigJar('uber', 'uber')
createStatsigJar('java-core', null)
createStatsigJar('linux-gnu-arm64', 'linux-gnu-arm64')
createStatsigJar('linux-gnu-x86_64', 'linux-gnu-x86_64')
createStatsigJar('linux-musl-x86_64', 'linux-musl-x86_64')
createStatsigJar('linux-musl-arm64', 'linux-musl-arm64')
createStatsigJar('x86_64-apple-darwin', 'macos-x86_64')
createStatsigJar('x86_64-pc-windows-msvc', 'windows-x86_64')

def expectedTasks = [
    'aarch64-apple-darwinJar',
    // 'aarch64-pc-windows-msvcJar',
    'centos7-x86_64Jar',
    'amazonlinux2-arm64Jar',
    'amazonlinux2-x86_64Jar',
    'amazonlinux2023-arm64Jar',
    'amazonlinux2023-x86_64Jar',
    'i686-pc-windows-msvcJar',
    'java-coreJar',
    'uberJar',
    'linux-gnu-arm64Jar',
    'linux-gnu-x86_64Jar',
    'linux-musl-x86_64Jar',
    'linux-musl-arm64Jar',
    'x86_64-apple-darwinJar',
    'x86_64-pc-windows-msvcJar',
]

processResources {
    filesMatching('statsigsdk.properties') {
        expand(project.properties)
    }
}

tasks.register('validateTasks') {
    doLast {
        def missingTasks = expectedTasks.findAll { taskName ->
            !project.tasks.findByName(taskName)
        }
        if (!missingTasks.isEmpty()) {
            throw new GradleException("The following expected tasks were not registered: ${missingTasks.join(', ')}")
        }
    }
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.matching { it.name.startsWith("publish") }.all { publishTask ->
    publishTask.dependsOn validateTasks
}

publishing {
    publications {
        create('mavenJava', MavenPublication) {
            artifactId = 'javacore'

            project.ext.artifactTasks.each { taskEntry ->
                def taskName = taskEntry.taskName
                def classifier = taskEntry.classifier
                try {
                    def task = tasks.named(taskName).get()
                    artifact(task)
                } catch (Exception e) {
                    println "Error: Failed to add artifact task: ${taskName} - ${e.message}"
                }
            }
            artifact sourcesJar
            artifact javadocJar

            pom {
                name.set("Statsig Java Core SDK")
                description.set("A feature gating and a/b testing java library for statsig")
                url.set("https://github.com/statsig-io") // TODO need to change to real repo url

                licenses {
                    license {
                        name.set("ISC License (ISC)")
                        url.set("https://github.com/statsig-io/java-server-sdk/blob/main/LICENSE")
                        distribution.set("repo")
                    }
                }

                developers {
                    developer {
                        id.set("statsig")
                        name.set("statsig")
                        url.set("https://github.com/statsig-io/")
                        email.set("support@statsig.com")
                    }
                }

                scm {
                    connection.set("scm:git:https://github.com/statsig/statsig-sdk.git")
                    developerConnection.set("scm:git:ssh://git@github.com:statsig/statsig-sdk.git")
                    url.set("https://github.com/statsig/statsig-sdk")
                }
            }
        }
    }

    repositories {
        maven {
            name = 'mavenCentral'
            url = uri('https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/')
            credentials {
                username = System.getenv('ORG_GRADLE_PROJECT_MAVEN_USERNAME')
                password = System.getenv('ORG_GRADLE_PROJECT_MAVEN_PASSWORD')
            }
        }
    }
}

signing {
    def signingKeyId = System.getenv("ORG_GRADLE_PROJECT_SIGNING_KEY_ID") ?: ""
    def signingKey = System.getenv("ORG_GRADLE_PROJECT_SIGNING_KEY") ?: ""
    def signingPassword = System.getenv("ORG_GRADLE_PROJECT_SIGNING_PASSWORD") ?: ""
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications['mavenJava']
}

checkstyle {
    toolVersion = "9.2"
    configFile = rootProject.file("config/checkstyle.xml")
    ignoreFailures = true // TODO we need change to false in the future
}
