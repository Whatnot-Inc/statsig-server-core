plugins {
    id 'java'
    id 'application'
}

group = 'com.example'
version = '1.0.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.statsig:serversdk:+'
    implementation 'com.statsig:javacore:+'
    implementation 'com.statsig:javacore:+:macos-arm64'
    implementation 'com.statsig:javacore:+:linux-gnu-x86_64'
}

def isRelease = project.hasProperty('release')

tasks.register('write_versions') {
    def versionsFile = file("$buildDir/versions.properties")
    versionsFile.parentFile.mkdirs()

    def props = new Properties()

    configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        if (artifact.moduleVersion.id.group == 'com.statsig' && artifact.moduleVersion.id.name == 'javacore') {
            props.setProperty('core.version', artifact.moduleVersion.id.version)
        }

        if (artifact.moduleVersion.id.group == 'com.statsig' && artifact.moduleVersion.id.name == 'serversdk') {
            props.setProperty('legacy.version', artifact.moduleVersion.id.version)
        }
    }

    versionsFile.withWriter { writer ->
        props.store(writer, 'Dependency versions')
    }
}

tasks.register('run_core', JavaExec) {
    group = 'application'
    description = 'Run JavaCoreBench.java'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'JavaCoreBench'
    dependsOn write_versions

    if (isRelease) {
        jvmArgs += ['-XX:+TieredCompilation', '-XX:+AggressiveOpts']
        environment 'JAVA_TOOL_OPTIONS', '-XX:+UseG1GC -Xms512m -Xmx2g'
    }
}

tasks.register('run_legacy', JavaExec) {
    group = 'application'
    description = 'Run JavaLegacyBench.java'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'JavaLegacyBench'
    dependsOn write_versions

    if (isRelease) {
        jvmArgs += ['-XX:+TieredCompilation', '-XX:+AggressiveOpts']
        environment 'JAVA_TOOL_OPTIONS', '-XX:+UseG1GC -Xms512m -Xmx2g'
    }
}
