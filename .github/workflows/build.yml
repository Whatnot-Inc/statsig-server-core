name: Build

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - release/**
      - beta/**
  pull_request:

env:
  IS_RELEASE: ${{ contains(github.ref, 'heads/release') }}
  IS_BETA: ${{ contains(github.ref, 'heads/beta') }}
  CARGO_TERM_COLOR: always
  FORCE_COLOR: true

  # Python Publishing
  MATURIN_PYPI_TOKEN: ${{ secrets.STATSIG_PYPI_PROD_TOKEN }}
  MATURIN_REPOSITORY: pypi


  NPM_TOKEN: ${{ secrets.SIGSTAT_PUBLISH_NPM }}


jobs:

  # -------------------------------------------------------------------- [Plan]

  plan:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    outputs:
      build_matrix: ${{ steps.plan.outputs.build_matrix }}
      should_publish: ${{ steps.plan.outputs.should_publish }}
    steps:
      - uses: actions/checkout@v4
      - name: Make Plan
        id: plan
        run: .github/build_plan.sh


  # -------------------------------------------------------------------- [Build]

  build:
    needs: plan

    strategy:
      matrix: ${{ fromJson(needs.plan.outputs.build_matrix) }}

    timeout-minutes: 15
    runs-on: ${{ matrix.config.runner }}

    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2

      - uses: pnpm/action-setup@v4
        with:
          version: 7.32.4

      - name: Install Build Dependencies
        run: |
          pnpm install --dir cli
          pip3 install maturin
          rustup target add ${{ matrix.config.target }}

      - name: "[Windows Only] Setup Python"
        if: ${{ runner.os == 'Windows' }}
        uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.config.py_arch }}

      - name: "[Linux Only] Build Docker Image"
        if: ${{ runner.os == 'Linux' }}
        uses: ./.github/actions/build-docker-image
        with:
          dockerhub_username: ${{ secrets.DOCKERHUB_USERNAME }}
          dockerhub_password: ${{ secrets.DOCKERHUB_TOKEN }}
          gh_token: ${{ secrets.KONG_FINE_GRAINED_REPO_PAT }}
          dockerfile_path: cli/src/docker/Dockerfile.${{ matrix.config.os }}
          docker_image_tag: statsig/server-core-${{ matrix.config.os }}-${{ matrix.config.arch }}
          platform: linux/${{ matrix.config.docker_arch }}

      - name: Build Package
        shell: bash
        run: |
          ./run build ${{ matrix.package }} \
            --os ${{ matrix.config.os }} \
            --arch ${{ matrix.config.arch }} \
            --target ${{ matrix.config.target }} \
            --out-dir build \
            --skip-docker-build \
            --release

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.target }}-${{ matrix.package }}
          if-no-files-found: error
          path: |
            statsig-pyo3/build/
            statsig-node/build/
            target/release/libstatsig_ffi.so
            target/release/libstatsig_ffi.dylib
            target/release/statsig_ffi.dll
            target/release/*statsig_ffi.a
            target/release/*statsig_ffi.lib


  # -------------------------------------------------------------------- [Publish]

  publish:
    needs: [plan, build]
    if: ${{ needs.plan.outputs.should_publish == 'true' }}
    
    runs-on: ubuntu-latest
    strategy:
      matrix: 
        package: ${{ fromJson(needs.plan.outputs.build_matrix).package }}
    
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 7.32.4

      - name: Setup
        run: |
          pnpm install --dir cli
          pip3 install maturin
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc

      - uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R artifacts
          
      - name: Publish ${{ matrix.package }}
        shell: bash
        run: |
          ./run publish \
            --working-dir artifacts \
            --package ${{ matrix.package }} \
            --workflow-id $GITHUB_RUN_ID \
            --skip-artifact-download
