name: Statsig Java Publish

on:
  workflow_dispatch:
    inputs:
      workflow_run_id:
        description: 'The StatsigFFI workflow run that built the artifacts to publish'
        required: true

env:
  ORG_GRADLE_PROJECT_MAVEN_USERNAME: ${{ secrets.ORG_GRADLE_PROJECT_MAVEN_USERNAME }}
  ORG_GRADLE_PROJECT_MAVEN_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_MAVEN_PASSWORD }}
  ORG_GRADLE_PROJECT_SIGNING_KEY_ID: ${{ secrets.ORG_GRADLE_PROJECT_SIGNING_KEY_ID }}
  ORG_GRADLE_PROJECT_SIGNING_KEY: ${{ secrets.ORG_GRADLE_PROJECT_SIGNING_KEY }}
  ORG_GRADLE_PROJECT_SIGNING_PASSWORD: ${{ secrets.ORG_GRADLE_PROJECT_SIGNING_PASSWORD }}

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get Workflow Run Info
        uses: ./.github/actions/verify-workflow-run-successful

      - name: Download Artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: statsig-ffi.yml
          run_id: ${{ github.event.inputs.workflow_run_id }}
          if_no_artifact_found: fail
          path: artifacts

      - name: List Artifacts
        run: |
          echo "Listing downloaded artifacts:"
          for artifact in artifacts/*; do
            if [ -d "$artifact" ]; then
              echo "Artifact: $(basename "$artifact")"
              du -sh "$artifact"
            fi
          done

      - name: Unzip and Move Release Artifacts
        run: |
          echo "Moving necessary release files..."
          
          target_dir_prefix="statsig-ffi/bindings/java/src/main/resources/native"
          
          declare -A target_dirs=(
            ["statsig-ffi-x86_64-apple-darwin"]="macos-x86_64"
            ["statsig-ffi-aarch64-apple-darwin"]="macos-arm64"
            ["statsig-ffi-amazonlinux2-arm64"]="amazonlinux2-arm64"
            ["statsig-ffi-amazonlinux2-x86_64"]="amazonlinux2-x86_64"
            ["statsig-ffi-amazonlinux2023-arm64"]="amazonlinux2023-arm64"
            ["statsig-ffi-amazonlinux2023-x86_64"]="amazonlinux2023-x86_64"
            ["statsig-ffi-aarch64-pc-windows-msvc"]="windows-arm64"
            ["statsig-ffi-x86_64-pc-windows-msvc"]="windows-x86_64"
            ["statsig-ffi-i686-pc-windows-msvc"]="windows-i686"
          )
          
          for key in "${!target_dirs[@]}"; do
            echo "---------------------------------------------------"
            echo "Processing artifact for ${key}..."
            src_path="artifacts/${key}"
        
            # Verify the existence of the source directory
            if [ ! -d "${src_path}" ]; then
            echo "Error: Source directory ${src_path} does not exist. Skipping this artifact."
            continue
            fi
        
            echo "Source directory ${src_path} exists. Checking for zip file..."
        
            # Check if it's a zip file and unzip if necessary
            zip_file="${src_path}.zip"
            if [ -f "$zip_file" ]; then
            echo "Unzipping ${zip_file} to ${src_path}..."
            unzip -o "$zip_file" -d "$src_path"
        
            if [ $? -eq 0 ]; then
            echo "Successfully unzipped ${zip_file}."
            else
            echo "Error: Failed to unzip ${zip_file}. Continuing to the next artifact."
            continue
            fi
            else
            echo "No zip file found for ${key}. Assuming files are already unzipped."
            fi
        
            dest_dir="$target_dir_prefix/${target_dirs[$key]}"
            echo "Creating destination directory: ${dest_dir}"
            mkdir -p "$dest_dir"
        
            # Verify files in the release folder before copying
            echo "Looking for files in ${src_path}/release to copy..."
            if ! find "$src_path" -type f -path "*/release/*" | grep -q .; then
            echo "Warning: No files found in ${src_path}/release. Skipping copy for ${key}."
            continue
            fi
        
            echo "Files found in ${src_path}/release. Starting copy process..."
            # Copy all files from the release folder
            find "$src_path" -type f -path "*/release/*" -exec cp {} "$dest_dir/" \;
        
            # Confirm copy success by listing the destination contents
            echo "Contents of ${dest_dir} after copy:"
            ls -lh "${dest_dir}"
        
            echo "Completed processing for ${key}."
            echo "---------------------------------------------------"
          done

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'  # or '8' if using Java 8
          distribution: "adopt"

      #       NOT AT THIS MOMENT
      #      - name: Build with Gradle
      #        working-directory: statsig-ffi/bindings/java
      #        run: ./gradlew clean build -i

      - name: Publish to Maven
        working-directory: statsig-ffi/bindings/java
        run: ./gradlew publish
