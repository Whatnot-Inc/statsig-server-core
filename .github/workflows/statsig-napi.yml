name: Statsig Node Api

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  action-info:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub Event JSON
        run: |
          echo "-- Loading JSON from $GITHUB_EVENT_PATH --"
          cat $GITHUB_EVENT_PATH

      - name: Print Env
        run: printenv

  build:
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        config:
          # -- Linux --

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            extras: --use-napi-cross --rebuild-openssl
            always_build: true

          - os: ubuntu-latest
            target: armv7-unknown-linux-gnueabihf
            extras: --use-napi-cross --rebuild-openssl

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            extras: --use-napi-cross --rebuild-openssl

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            extras: --use-cross-compile --rebuild-openssl

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            extras: --use-cross-compile --rebuild-openssl

          # -- Windows --

          - os: windows-latest
            target: x86_64-pc-windows-msvc

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            always_build: true

          # - os: windows-latest
          #   target: i686-pc-windows-msvc
          #   node_arch: x86

          # -- MacOS --

          - os: macos-latest
            target: x86_64-apple-darwin

          - os: macos-latest
            target: aarch64-apple-darwin
            always_build: true
            
    runs-on: ${{ matrix.config.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build Statsig Napi
        if: ${{ github.ref_name == 'main' || matrix.config.always_build || github.event_name == 'release' }}
        uses: ./.github/actions/build-napi
        with:
          target: ${{ matrix.config.target }}
          gh_token: ${{ secrets.GITHUB_TOKEN }}
          extras: ${{ matrix.config.extras }}
          node_arch: ${{ matrix.config.node_arch }}

  list-artifacts:
    name: List Artifacts
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: statsig-napi/artifacts

      - name: Relevant Files
        run: |
          ls -al ${{ github.workspace }}/statsig-napi
          find ${{ github.workspace }}/statsig-napi -type f -name "*.node"  -not -path "*/node_modules/*"

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    if: false
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Dependencies
        run: yarn install
        working-directory: statsig-napi

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: statsig-napi/artifacts

      - name: List Relevant Files
        run: |
          ls -al ${{ github.workspace }}/statsig-napi
          ls -al ${{ github.workspace }}/statsig-napi/npm
          ls -al ${{ github.workspace }}/statsig-napi/artifacts
          ls -al ${{ github.workspace }}/statsig-napi/artifacts/bindings-armv7-unknown-linux-gnueabihf

      - name: Move Artifacts
        run: yarn artifacts
        working-directory: statsig-napi

      - name: Copy Files to /build
        run: |
          mkdir -p build/node/npm
          cp -r statsig-napi/npm/* build/node/npm
          cp -r statsig-napi/artifacts/js-lib-files/* build/node
          cp statsig-napi/yarn.lock build/node/yarn.lock
          cp statsig-napi/.npmignore build/node/.npmignore

      - name: List Relevant Files
        run: |
          ls -al ${{ github.workspace }}/build/node
          ls -al ${{ github.workspace }}/build/node/npm
          ls -al ${{ github.workspace }}/build/node/npm/linux-arm64-musl
          ls -al ${{ github.workspace }}/build/node/npm/linux-arm64-gnu
          ls -al ${{ github.workspace }}/build/node/npm/linux-x64-musl
          ls -al ${{ github.workspace }}/build/node/npm/linux-arm-gnueabihf

      - name: Ensure Required Binaries Exist
        run: ./tools/node/verify_distribution

      - name: Sync Package Version
        run: |
          ./tools/node/beta_tag_package
          ./tools/node/sync_version

      - name: Publish to NPM
        if: ${{ github.ref_name == 'main' }}
        run: |
          yarn install
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          set -e
          npm publish --tag beta --access public
          echo $?
        working-directory: build/node
        env:
          GITHUB_TOKEN: ${{ secrets.STATSIG_CORE_SERVER_SDK_PAT }}
          NPM_TOKEN: ${{ secrets.SIGSTAT_PUBLISH_NPM }}
