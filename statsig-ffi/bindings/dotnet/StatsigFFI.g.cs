// <auto-generated>
// This code is generated by csbindgen.
// DON'T CHANGE THIS DIRECTLY.
// </auto-generated>
#pragma warning disable CS8500
#pragma warning disable CS8981
using System;
using System.Runtime.InteropServices;


namespace StatsigServer
{
    internal static unsafe partial class StatsigFFI
    {
        const string __DllName = "/Users/danielloomb/Projects/statsig-server-core/target/release/libstatsig_ffi.dylib";



        [DllImport(__DllName, EntryPoint = "statsig_options_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern StatsigOptionsRef statsig_options_create();

        [DllImport(__DllName, EntryPoint = "statsig_options_release", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void statsig_options_release(StatsigOptionsRef* options_ref);

        [DllImport(__DllName, EntryPoint = "statsig_user_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern StatsigUserRef statsig_user_create(byte* user_id, byte* custom_ids_json, byte* email, byte* ip, byte* user_agent, byte* country, byte* locale, byte* app_version, byte* custom_json, byte* private_attributes_json);

        [DllImport(__DllName, EntryPoint = "statsig_user_release", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void statsig_user_release(StatsigUserRef* user_ref);

        [DllImport(__DllName, EntryPoint = "statsig_create", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern StatsigRef statsig_create(byte* sdk_key, StatsigOptionsRef options_ref);

        [DllImport(__DllName, EntryPoint = "statsig_release", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void statsig_release(StatsigRef* statsig_ref);

        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        internal delegate void statsig_initialize_callback_delegate();

        [DllImport(__DllName, EntryPoint = "statsig_initialize", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern void statsig_initialize(StatsigRef statsig_ref, statsig_initialize_callback_delegate callback);

        [DllImport(__DllName, EntryPoint = "statsig_get_current_values", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* statsig_get_current_values(StatsigRef statsig_ref);

        [DllImport(__DllName, EntryPoint = "statsig_check_gate", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        [return: MarshalAs(UnmanagedType.U1)]
        internal static extern bool statsig_check_gate(StatsigRef statsig_ref, StatsigUserRef user_ref, byte* gate_name);

        [DllImport(__DllName, EntryPoint = "statsig_get_experiment", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* statsig_get_experiment(StatsigRef statsig_ref, StatsigUserRef user_ref, byte* experiment_name);

        [DllImport(__DllName, EntryPoint = "statsig_get_client_init_response", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern byte* statsig_get_client_init_response(StatsigRef statsig_ref, StatsigUserRef user_ref);

        [DllImport(__DllName, EntryPoint = "statsig_get_client_init_response_buffer", CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        internal static extern nuint statsig_get_client_init_response_buffer(StatsigRef statsig_ref, StatsigUserRef user_ref, byte* buffer, nuint buffer_size);


    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct StatsigOptionsRef
    {
        public nuint pointer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct StatsigUserRef
    {
        public nuint pointer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal unsafe partial struct StatsigRef
    {
        public nuint pointer;
    }



}
